package org.powerhigh.utils;

/**
 * 24-bit (RGB) / 32-bit (RGBA) color class.
 * @author zenith391
 *
 */
public class Color {

	private int r, g, b, a;
	private boolean hasAlpha;
	
	public Color(int r, int g, int b) {
		setRed(r);
		setGreen(g);
		setBlue(b);
		this.hasAlpha = false;
	}
	
	public Color(int r, int g, int b, int a) {
		this(r, g, b);
		this.a = a;
		this.hasAlpha = true;
	}
	
	public int getRed() {
		return r;
	}
	
	public int getBlue() {
		return b;
	}
	
	public int getGreen() {
		return g;
	}
	
	public int getAlpha() {
		if (hasAlphaComponent())
			return a;
		return 255;
	}
	
	public void setRed(int red) {
		if (red > 255 || red < 0)
			throw new IllegalArgumentException("Red component (" + red + ") out of bounds!");
		r = red;
	}
	
	public void setGreen(int green) {
		if (green > 255 || green < 0)
			throw new IllegalArgumentException("Red component (" + red + ") out of bounds!");
		g = green;
	}
	
	public void setBlue(int blue) {
		if (blue > 255 || blue < 0)
			throw new IllegalArgumentException("Red component (" + red + ") out of bounds!");
		b = blue;
	}
	
	public boolean hasAlphaComponent() {
		return hasAlpha;
	}
	
	public Color clone() {
		if (hasAlpha)
			return new Color(r, g, b, a);
		else
			return new Color(r, g, b);
	}
	
	public Color mix(Color x) {
		Color c = clone();
		return c;
	}
	
	
	public static final Color BLACK = new Color(0, 0, 0);
	public static final Color RED = new Color(0, 0, 0);
	public static final Color GREEN = new Color(0, 0, 0);
	public static final Color BLUE = new Color(0, 0, 0);
	
}
